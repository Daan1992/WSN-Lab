###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                09/Mar/2016  15:48:03
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\Source\DemoRouter.c
#    Command line       =  
#        -f "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x02000000 -DDEFAULT_CHANLIST=0x00000800
#        -DZDAPP_CONFIG_PAN_ID=0x1AAD -DNWK_START_DELAY=100
#        -DEXTENDED_JOINING_RANDOM_MASK=0x007F -DBEACON_REQUEST_DELAY=100
#        -DBEACON_REQ_DELAY_MASK=0x00FF -DLINK_STATUS_JITTER_MASK=0x007F
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\DemoApp\Source\DemoRouter.c" -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ROUTER -lC
#        "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\RouterEB\List\" -lA
#        "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\RouterEB\List\"
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\RouterEB\Obj\" -e
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\" -I
#        "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\" -I
#        "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes
#    List file          =  
#        C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\RouterEB\List\DemoRouter.lst
#    Object file        =  
#        C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\RouterEB\Obj\DemoRouter.r51
#
###############################################################################

C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\DemoApp\Source\DemoRouter.c
      1          /**************************************************************************************************
      2            Filename:       DemoRouter.c
      3          
      4            Description:    Router application for the sensor demo utilizing the Simple API.
      5          
      6                            The sensor application binds to a gateway and will periodically
      7                            read temperature and supply voltage from the ADC and send report
      8                            towards the gateway node.
      9          
     10          
     11            Copyright 2009 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /******************************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include "ZComDef.h"
     47          #include "OSAL.h"
     48          #include "sapi.h"
     49          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     50          #include "hal_lcd.h"
     51          #include "hal_led.h"
     52          #include "hal_adc.h"
     53          #include "hal_mcu.h"
     54          #include "hal_uart.h"
     55          #include "OSAL_NV.h"
     56          #include "DemoApp.h"
     57          #include "APS.h"
     58          
     59          /******************************************************************************
     60           * CONSTANTS
     61           */
     62          #define REPORT_FAILURE_LIMIT                3
     63          #define ACK_REQ_INTERVAL                    5 // each 5th packet is sent with ACK request
     64          
     65          // Application States
     66          #define APP_INIT                            0    // Initial state
     67          #define APP_START                           1    // Sensor has joined network
     68          #define APP_BIND                            2    // Sensor is in process of binding
     69          #define APP_REPORT                          4    // Sensor is in reporting state
     70          
     71          //LED constants
     72          #define LED_PORT                            1
     73          #define LED_PIN                             2
     74          
     75          // Application osal event identifiers
     76          // Bit mask of events ( from 0x0000 to 0x00FF )
     77          #define MY_START_EVT                        0x0001
     78          #define MY_REPORT_EVT                       0x0002
     79          #define MY_FIND_COLLECTOR_EVT               0x0004
     80          
     81          // ADC definitions for CC2430/CC2530 from the hal_adc.c file
     82          #if defined (HAL_MCU_CC2530)
     83          #define HAL_ADC_REF_125V    0x00    /* Internal 1.25V Reference */
     84          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     85          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     86          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     87          #define HAL_ADC_CHN_VDD3    0x0f    /* Input channel: VDD/3 */
     88          #define HAL_ADC_CHN_TEMP    0x0e    /* Temperature sensor */
     89          #endif // HAL_MCU_CC2530
     90          
     91          /******************************************************************************
     92           * TYPEDEFS
     93           */
     94          
     95          /******************************************************************************
     96           * LOCAL VARIABLES
     97           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          static uint8  appState =          APP_INIT;
   \                     appState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          static uint8  reportState =       FALSE;
   \                     reportState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    100          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          static uint8 reportFailureNr =    0;
   \                     reportFailureNr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          static uint8 bindRetries =        0;
   \                     bindRetries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    103          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    104          static uint16 myReportPeriod =    5000;         // milliseconds
   \                     myReportPeriod:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myReportPeriod>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    105          static uint16 myBindRetryDelay =  2000;         // milliseconds
   \                     myBindRetryDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myBindRetryDelay>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    106          static uint8 myStartRetryDelay =  10;           // milliseconds
   \                     myStartRetryDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for myStartRetryDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    107          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          static uint16 parentShortAddr;
   \                     parentShortAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    109          
    110          /******************************************************************************
    111           * GLOBAL VARIABLES
    112           */
    113          
    114          // Inputs and Outputs for Sensor device
    115          #define NUM_OUT_CMD_SENSOR        1
    116          #define NUM_IN_CMD_SENSOR         0
    117          
    118          // List of output and input commands for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    119          const cId_t zb_OutCmdList[NUM_OUT_CMD_SENSOR] =
   \                     zb_OutCmdList:
   \   000000   0200         DW 2
    120          {
    121            SENSOR_REPORT_CMD_ID
    122          };
    123          
    124          // Define SimpleDescriptor for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    125          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   200F         DW 3872
   \   000003   0100         DW 1
   \   000005   01           DB 1
   \   000006   00           DB 0
   \   000007   0000         DW 0H
   \   000009   01           DB 1
   \   00000A   ....         DW zb_OutCmdList
    126          {
    127            MY_ENDPOINT_ID,             //  Endpoint
    128            MY_PROFILE_ID,              //  Profile ID
    129            DEV_ID_SENSOR,              //  Device ID
    130            DEVICE_VERSION_SENSOR,      //  Device Version
    131            0,                          //  Reserved
    132            NUM_IN_CMD_SENSOR,          //  Number of Input Commands
    133            (cId_t *) NULL,             //  Input Command List
    134            NUM_OUT_CMD_SENSOR,         //  Number of Output Commands
    135            (cId_t *) zb_OutCmdList     //  Output Command List
    136          };
    137          
    138          
    139          /******************************************************************************
    140           * LOCAL FUNCTIONS
    141           */
    142          
    143          void uartRxCB( uint8 port, uint8 event );
    144          static void sendReport(void);
    145          static int8 readTemp(void);
    146          static uint8 readVoltage(void);
    147          
    148          /*****************************************************************************
    149           * @fn          zb_HandleOsalEvent
    150           *
    151           * @brief       The zb_HandleOsalEvent function is called by the operating
    152           *              system when a task event is set
    153           *
    154           * @param       event - Bitmask containing the events that have been set
    155           *
    156           * @return      none
    157           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    158          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    159          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    160            if( event & SYS_EVENT_MSG )
    161            {
    162            }
    163          
    164            if( event & ZB_ENTRY_EVENT )
   \   000009   EE           MOV     A,R6
   \   00000A   5400         ANL     A,#0x0
   \   00000C   F8           MOV     R0,A
   \   00000D   EF           MOV     A,R7
   \   00000E   5410         ANL     A,#0x10
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   6010         JZ      ??zb_HandleOsalEvent_0
    165            {
    166              // blind LED 1 to indicate joining a network
    167              HalLedBlink ( HAL_LED_1, 0, 50, 500 );
   \   000015                ; Setup parameters for call to function HalLedBlink
   \   000015   7CF4         MOV     R4,#-0xc
   \   000017   7D01         MOV     R5,#0x1
   \   000019   7B32         MOV     R3,#0x32
   \   00001B   7A00         MOV     R2,#0x0
   \   00001D   7901         MOV     R1,#0x1
   \   00001F   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    168          
    169              // Start the device
    170              zb_StartRequest();
   \   000022                ; Setup parameters for call to function zb_StartRequest
   \   000022   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    171            }
    172          
    173            if ( event & MY_START_EVT )
   \                     ??zb_HandleOsalEvent_0:
   \   000025   EE           MOV     A,R6
   \   000026   A2E0         MOV     C,0xE0 /* A   */.0
   \   000028   5003         JNC     ??zb_HandleOsalEvent_1
    174            {
    175              zb_StartRequest();
   \   00002A                ; Setup parameters for call to function zb_StartRequest
   \   00002A   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    176            }
    177          
    178            if ( event & MY_REPORT_EVT )
   \                     ??zb_HandleOsalEvent_1:
   \   00002D   EE           MOV     A,R6
   \   00002E   5402         ANL     A,#0x2
   \   000030   6031         JZ      ??zb_HandleOsalEvent_2
    179            {
    180              if ( appState == APP_REPORT )
   \   000032   90....       MOV     DPTR,#appState
   \   000035   E0           MOVX    A,@DPTR
   \   000036   6404         XRL     A,#0x4
   \   000038   7029         JNZ     ??zb_HandleOsalEvent_2
    181              {
    182                sendReport();
   \   00003A                ; Setup parameters for call to function sendReport
   \   00003A   12....       LCALL   `??sendReport::?relay`; Banked call to: sendReport
    183                osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod );
   \   00003D                ; Setup parameters for call to function osal_start_timerEx
   \   00003D   90....       MOV     DPTR,#myReportPeriod
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V1,A
   \   000047   E4           CLR     A
   \   000048   F5..         MOV     ?V2,A
   \   00004A   F5..         MOV     ?V3,A
   \   00004C   78..         MOV     R0,#?V0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000051   7A02         MOV     R2,#0x2
   \   000053   7B00         MOV     R3,#0x0
   \   000055   90....       MOV     DPTR,#sapi_TaskID
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F9           MOV     R1,A
   \   00005A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00005D   7404         MOV     A,#0x4
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000062   E9           MOV     A,R1
    184              }
    185            }
    186          
    187            if ( event & MY_FIND_COLLECTOR_EVT )
   \                     ??zb_HandleOsalEvent_2:
   \   000063   EE           MOV     A,R6
   \   000064   5404         ANL     A,#0x4
   \   000066   6020         JZ      ??zb_HandleOsalEvent_3
    188            {
    189              // blind LED 2 to indicate discovery and binding
    190              HalLedBlink ( HAL_LED_2, 0, 50, 500 );
   \   000068                ; Setup parameters for call to function HalLedBlink
   \   000068   7CF4         MOV     R4,#-0xc
   \   00006A   7D01         MOV     R5,#0x1
   \   00006C   7B32         MOV     R3,#0x32
   \   00006E   7A00         MOV     R2,#0x0
   \   000070   7902         MOV     R1,#0x2
   \   000072   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    191          
    192              appState = APP_BIND;
   \   000075   90....       MOV     DPTR,#appState
   \   000078   7402         MOV     A,#0x2
   \   00007A   F0           MOVX    @DPTR,A
    193              // Find and bind to a collector device
    194              zb_BindDevice( TRUE, SENSOR_REPORT_CMD_ID, (uint8 *)NULL );
   \   00007B                ; Setup parameters for call to function zb_BindDevice
   \   00007B   7C00         MOV     R4,#0x0
   \   00007D   7D00         MOV     R5,#0x0
   \   00007F   7A02         MOV     R2,#0x2
   \   000081   7B00         MOV     R3,#0x0
   \   000083   7901         MOV     R1,#0x1
   \   000085   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
    195            }
    196          }
   \                     ??zb_HandleOsalEvent_3:
   \   000088   7F04         MOV     R7,#0x4
   \   00008A   02....       LJMP    ?BANKED_LEAVE_XDATA
    197          
    198          /******************************************************************************
    199           * @fn      zb_HandleKeys
    200           *
    201           * @brief   Handles all key events for this device.
    202           *
    203           * @param   shift - true if in shift/alt.
    204           * @param   keys - bit field for key events. Valid entries:
    205           *                 EVAL_SW4
    206           *                 EVAL_SW3
    207           *                 EVAL_SW2
    208           *                 EVAL_SW1
    209           *
    210           * @return  none
    211           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    212          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    213          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    214            // Shift is used to make each button/switch dual purpose.
    215            if ( shift )
   \   000009   EE           MOV     A,R6
   \   00000A   7030         JNZ     ??zb_HandleKeys_0
    216            {
    217              if ( keys & HAL_KEY_SW_1 )
    218              {
    219              }
    220              if ( keys & HAL_KEY_SW_2 )
    221              {
    222              }
    223              if ( keys & HAL_KEY_SW_3 )
    224              {
    225              }
    226              if ( keys & HAL_KEY_SW_4 )
    227              {
    228              }
    229            }
    230            else
    231            {
    232              if ( keys & HAL_KEY_SW_1 )
   \   00000C   EF           MOV     A,R7
   \   00000D   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000F   5021         JNC     ??zb_HandleKeys_1
    233              {
    234                // Start reporting
    235                if ( reportState == FALSE ) {
   \   000011   90....       MOV     DPTR,#reportState
   \   000014   E0           MOVX    A,@DPTR
   \   000015   701B         JNZ     ??zb_HandleKeys_1
    236                  osal_set_event( sapi_TaskID, MY_REPORT_EVT );
   \   000017                ; Setup parameters for call to function osal_set_event
   \   000017   7A02         MOV     R2,#0x2
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#sapi_TaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000023   E9           MOV     A,R1
    237                  reportState = TRUE;
   \   000024   90....       MOV     DPTR,#reportState
   \   000027   7401         MOV     A,#0x1
   \   000029   F0           MOVX    @DPTR,A
    238                  HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   00002A                ; Setup parameters for call to function HalLedSet
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7902         MOV     R1,#0x2
   \   00002E   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000031   E9           MOV     A,R1
    239                }
    240              }
    241              if ( keys & HAL_KEY_SW_2 )
   \                     ??zb_HandleKeys_1:
   \   000032   EF           MOV     A,R7
   \   000033   A2E1         MOV     C,0xE0 /* A   */.1
   \   000035   5005         JNC     ??zb_HandleKeys_0
    242              {
    243                MCU_IO_DIR_OUTPUT(LED_PORT, LED_PIN);
   \   000037   43FE04       ORL     0xfe,#0x4
    244                MCU_IO_SET_HIGH(LED_PORT, LED_PIN);
   \   00003A   D292         SETB    0x90.2
    245              }
    246              if ( keys & HAL_KEY_SW_3 )
    247              {
    248              }
    249              if ( keys & HAL_KEY_SW_4 )
    250              {
    251              }
    252            }
    253          }
   \                     ??zb_HandleKeys_0:
   \   00003C   7F01         MOV     R7,#0x1
   \   00003E   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000041                REQUIRE P1DIR
   \   000041                REQUIRE _A_P1
    254          
    255          /******************************************************************************
    256           * @fn          zb_StartConfirm
    257           *
    258           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    259           *              after a start request operation completes
    260           *
    261           * @param       status - The status of the start operation.  Status of
    262           *                       ZB_SUCCESS indicates the start operation completed
    263           *                       successfully.  Else the status is an error code.
    264           *
    265           * @return      none
    266           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    267          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    268          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    269            // If the device sucessfully started, change state to running
    270            if ( status == ZB_SUCCESS )
   \   000007   EE           MOV     A,R6
   \   000008   7033         JNZ     ??zb_StartConfirm_0
    271            {
    272              // Set LED 1 to indicate that node is operational on the network
    273              HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
   \   00000A                ; Setup parameters for call to function HalLedSet
   \   00000A   7A01         MOV     R2,#0x1
   \   00000C   7901         MOV     R1,#0x1
   \   00000E   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000011   E9           MOV     A,R1
    274          
    275              // Change application state
    276              appState = APP_START;
   \   000012   90....       MOV     DPTR,#appState
   \   000015   7401         MOV     A,#0x1
   \   000017   F0           MOVX    @DPTR,A
    277          
    278              // Set event to bind to a collector
    279              osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
   \   000018                ; Setup parameters for call to function osal_set_event
   \   000018   7A04         MOV     R2,#0x4
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   90....       MOV     DPTR,#sapi_TaskID
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000024   E9           MOV     A,R1
    280          
    281              // Store parent short address
    282              zb_GetDeviceInfo(ZB_INFO_PARENT_SHORT_ADDR, &parentShortAddr);
   \   000025                ; Setup parameters for call to function zb_GetDeviceInfo
   \   000025   7A..         MOV     R2,#parentShortAddr & 0xff
   \   000027   7B..         MOV     R3,#(parentShortAddr >> 8) & 0xff
   \   000029   7903         MOV     R1,#0x3
   \   00002B   12....       LCALL   `??zb_GetDeviceInfo::?relay`; Banked call to: zb_GetDeviceInfo
    283          
    284              // Turn OFF Allow Bind mode infinitly
    285              zb_AllowBind( 0x00 );
   \   00002E                ; Setup parameters for call to function zb_AllowBind
   \   00002E   7900         MOV     R1,#0x0
   \   000030   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    286              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   000033                ; Setup parameters for call to function HalLedSet
   \   000033   7A00         MOV     R2,#0x0
   \   000035   7902         MOV     R1,#0x2
   \   000037   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00003A   E9           MOV     A,R1
   \   00003B   8024         SJMP    ??zb_StartConfirm_1
    287            }
    288            else
    289            {
    290              // Try again later with a delay
    291              osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
   \                     ??zb_StartConfirm_0:
   \   00003D                ; Setup parameters for call to function osal_start_timerEx
   \   00003D   90....       MOV     DPTR,#myStartRetryDelay
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V0,A
   \   000043   E4           CLR     A
   \   000044   F5..         MOV     ?V1,A
   \   000046   F5..         MOV     ?V2,A
   \   000048   F5..         MOV     ?V3,A
   \   00004A   78..         MOV     R0,#?V0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00004F   7A01         MOV     R2,#0x1
   \   000051   7B00         MOV     R3,#0x0
   \   000053   90....       MOV     DPTR,#sapi_TaskID
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F9           MOV     R1,A
   \   000058   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00005B   7404         MOV     A,#0x4
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000060   E9           MOV     A,R1
    292            }
    293          }
   \                     ??zb_StartConfirm_1:
   \   000061   7F04         MOV     R7,#0x4
   \   000063   02....       LJMP    ?BANKED_LEAVE_XDATA
    294          
    295          /******************************************************************************
    296           * @fn          zb_SendDataConfirm
    297           *
    298           * @brief       The zb_SendDataConfirm callback function is called by the
    299           *              ZigBee after a send data operation completes
    300           *
    301           * @param       handle - The handle identifying the data transmission.
    302           *              status - The status of the operation.
    303           *
    304           * @return      none
    305           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    306          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    307          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    308            if( status != ZB_SUCCESS )
   \   000009   EF           MOV     A,R7
   \   00000A   605E         JZ      ??zb_SendDataConfirm_0
    309            {
    310              if ( ++reportFailureNr >= REPORT_FAILURE_LIMIT )
   \   00000C   90....       MOV     DPTR,#reportFailureNr
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   2401         ADD     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
   \   000013   90....       MOV     DPTR,#reportFailureNr
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C3           CLR     C
   \   000018   9403         SUBB    A,#0x3
   \   00001A   4054         JC      ??zb_SendDataConfirm_1
    311              {
    312                 // Stop reporting
    313                 osal_stop_timerEx( sapi_TaskID, MY_REPORT_EVT );
   \   00001C                ; Setup parameters for call to function osal_stop_timerEx
   \   00001C   7A02         MOV     R2,#0x2
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   90....       MOV     DPTR,#sapi_TaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000028   E9           MOV     A,R1
    314          
    315                 // After failure start reporting automatically when the device
    316                 // is binded to a new gateway
    317                 reportState = TRUE;
   \   000029   90....       MOV     DPTR,#reportState
   \   00002C   7401         MOV     A,#0x1
   \   00002E   F0           MOVX    @DPTR,A
    318          
    319                 // Delete previous binding
    320                 zb_BindDevice( FALSE, SENSOR_REPORT_CMD_ID, (uint8 *)NULL );
   \   00002F                ; Setup parameters for call to function zb_BindDevice
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A02         MOV     R2,#0x2
   \   000035   7B00         MOV     R3,#0x0
   \   000037   7900         MOV     R1,#0x0
   \   000039   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
    321          
    322                // Try to bind a new gateway
    323                 osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
   \   00003C                ; Setup parameters for call to function osal_start_timerEx
   \   00003C   90....       MOV     DPTR,#myBindRetryDelay
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V0,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F5..         MOV     ?V1,A
   \   000046   E4           CLR     A
   \   000047   F5..         MOV     ?V2,A
   \   000049   F5..         MOV     ?V3,A
   \   00004B   78..         MOV     R0,#?V0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000050   7A04         MOV     R2,#0x4
   \   000052   7B00         MOV     R3,#0x0
   \   000054   90....       MOV     DPTR,#sapi_TaskID
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   E9           MOV     A,R1
    324                 reportFailureNr = 0;
   \   000062   90....       MOV     DPTR,#reportFailureNr
   \   000065   7400         MOV     A,#0x0
   \   000067   F0           MOVX    @DPTR,A
   \   000068   8006         SJMP    ??zb_SendDataConfirm_1
    325              }
    326            }
    327            // status == SUCCESS
    328            else
    329            {
    330              // Reset failure counter
    331              reportFailureNr = 0;
   \                     ??zb_SendDataConfirm_0:
   \   00006A   90....       MOV     DPTR,#reportFailureNr
   \   00006D   7400         MOV     A,#0x0
   \   00006F   F0           MOVX    @DPTR,A
    332            }
    333          }
   \                     ??zb_SendDataConfirm_1:
   \   000070   7F04         MOV     R7,#0x4
   \   000072   02....       LJMP    ?BANKED_LEAVE_XDATA
    334          
    335          /******************************************************************************
    336           * @fn          zb_BindConfirm
    337           *
    338           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    339           *              after a bind operation completes.
    340           *
    341           * @param       commandId - The command ID of the binding being confirmed.
    342           *              status - The status of the bind operation.
    343           *
    344           * @return      none
    345           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    346          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    347          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V4,R1
    348            if( status == ZB_SUCCESS )
   \   00000B   E5..         MOV     A,?V4
   \   00000D   7023         JNZ     ??zb_BindConfirm_0
    349            {
    350              appState = APP_REPORT;
   \   00000F   90....       MOV     DPTR,#appState
   \   000012   7404         MOV     A,#0x4
   \   000014   F0           MOVX    @DPTR,A
    351              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A00         MOV     R2,#0x0
   \   000017   7902         MOV     R1,#0x2
   \   000019   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00001C   E9           MOV     A,R1
    352          
    353              // After failure reporting start automatically when the device
    354              // is binded to a new gateway
    355              if ( reportState )
   \   00001D   90....       MOV     DPTR,#reportState
   \   000020   E0           MOVX    A,@DPTR
   \   000021   604A         JZ      ??zb_BindConfirm_1
    356              {
    357                // Start reporting
    358                osal_set_event( sapi_TaskID, MY_REPORT_EVT );
   \   000023                ; Setup parameters for call to function osal_set_event
   \   000023   7A02         MOV     R2,#0x2
   \   000025   7B00         MOV     R3,#0x0
   \   000027   90....       MOV     DPTR,#sapi_TaskID
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00002F   E9           MOV     A,R1
   \   000030   803B         SJMP    ??zb_BindConfirm_1
    359              }
    360            }
    361            else
    362            {
    363              if ( ++bindRetries >= 2 ) {
   \                     ??zb_BindConfirm_0:
   \   000032   90....       MOV     DPTR,#bindRetries
   \   000035   E0           MOVX    A,@DPTR
   \   000036   2401         ADD     A,#0x1
   \   000038   F0           MOVX    @DPTR,A
   \   000039   90....       MOV     DPTR,#bindRetries
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   C3           CLR     C
   \   00003E   9402         SUBB    A,#0x2
   \   000040   4005         JC      ??zb_BindConfirm_2
    364                // Reset the system
    365                zb_SystemReset();
   \   000042                ; Setup parameters for call to function zb_SystemReset
   \   000042   12....       LCALL   `??zb_SystemReset::?relay`; Banked call to: zb_SystemReset
   \   000045   8026         SJMP    ??zb_BindConfirm_1
    366              }
    367              else
    368              {
    369                osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
   \                     ??zb_BindConfirm_2:
   \   000047                ; Setup parameters for call to function osal_start_timerEx
   \   000047   90....       MOV     DPTR,#myBindRetryDelay
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V1,A
   \   000051   E4           CLR     A
   \   000052   F5..         MOV     ?V2,A
   \   000054   F5..         MOV     ?V3,A
   \   000056   78..         MOV     R0,#?V0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00005B   7A04         MOV     R2,#0x4
   \   00005D   7B00         MOV     R3,#0x0
   \   00005F   90....       MOV     DPTR,#sapi_TaskID
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000067   7404         MOV     A,#0x4
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   E9           MOV     A,R1
    370              }
    371            }
    372          }
   \                     ??zb_BindConfirm_1:
   \   00006D   7F05         MOV     R7,#0x5
   \   00006F   02....       LJMP    ?BANKED_LEAVE_XDATA
    373          
    374          /******************************************************************************
    375           * @fn          zb_AllowBindConfirm
    376           *
    377           * @brief       Indicates when another device attempted to bind to this device
    378           *
    379           * @param
    380           *
    381           * @return      none
    382           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    383          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    384          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    385            (void)source;
    386          }
   \   000000   02....       LJMP    ?BRET
    387          
    388          /******************************************************************************
    389           * @fn          zb_FindDeviceConfirm
    390           *
    391           * @brief       The zb_FindDeviceConfirm callback function is called by the
    392           *              ZigBee stack when a find device operation completes.
    393           *
    394           * @param       searchType - The type of search that was performed.
    395           *              searchKey - Value that the search was executed on.
    396           *              result - The result of the search.
    397           *
    398           * @return      none
    399           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    400          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    401          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    402            (void)searchType;
    403            (void)searchKey;
    404            (void)result;
    405          }
   \   000000   02....       LJMP    ?BRET
    406          
    407          /******************************************************************************
    408           * @fn          zb_ReceiveDataIndication
    409           *
    410           * @brief       The zb_ReceiveDataIndication callback function is called
    411           *              asynchronously by the ZigBee stack to notify the application
    412           *              when data is received from a peer device.
    413           *
    414           * @param       source - The short address of the peer device that sent the data
    415           *              command - The commandId associated with the data
    416           *              len - The number of bytes in the pData parameter
    417           *              pData - The data sent by the peer device
    418           *
    419           * @return      none
    420           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    421          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    422          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    423            (void)source;
    424            (void)command;
    425            (void)len;
    426            (void)pData;
    427          }
   \   000000   02....       LJMP    ?BRET
    428          
    429          /******************************************************************************
    430           * @fn          uartRxCB
    431           *
    432           * @brief       Callback function for UART
    433           *
    434           * @param       port - UART port
    435           *              event - UART event that caused callback
    436           *
    437           * @return      none
    438           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    439          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
    440          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    441            (void)port;
    442            (void)event;
    443          }
   \   000000   02....       LJMP    ?BRET
    444          
    445          /******************************************************************************
    446           * @fn          sendReport
    447           *
    448           * @brief       Send sensor report
    449           *
    450           * @param       none
    451           *
    452           * @return      none
    453           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    454          static void sendReport(void)
   \                     sendReport:
    455          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    456            uint8 pData[SENSOR_REPORT_LENGTH];
    457            static uint8 reportNr = 0;
    458            uint8 txOptions;
    459          
    460            // Read and report temperature value
    461            pData[SENSOR_TEMP_OFFSET] = readTemp();
   \   00000A                ; Setup parameters for call to function readTemp
   \   00000A   12....       LCALL   `??readTemp::?relay` ; Banked call to: readTemp
   \   00000D   E9           MOV     A,R1
   \   00000E   C0E0         PUSH    A
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   D0E0         POP     A
   \   000018   F0           MOVX    @DPTR,A
    462          
    463            // Read and report voltage value
    464            pData[SENSOR_VOLTAGE_OFFSET] = readVoltage();
   \   000019                ; Setup parameters for call to function readVoltage
   \   000019   12....       LCALL   `??readVoltage::?relay`; Banked call to: readVoltage
   \   00001C   E9           MOV     A,R1
   \   00001D   C0E0         PUSH    A
   \   00001F   7401         MOV     A,#0x1
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   D0E0         POP     A
   \   000026   F0           MOVX    @DPTR,A
    465          
    466            pData[SENSOR_PARENT_OFFSET] =  HI_UINT16(parentShortAddr);
   \   000027   90....       MOV     DPTR,#parentShortAddr
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F8           MOV     R0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F9           MOV     R1,A
   \   00002F   E4           CLR     A
   \   000030   C9           XCH     A,R1
   \   000031   F8           MOV     R0,A
   \   000032   E8           MOV     A,R0
   \   000033   C0E0         PUSH    A
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   D0E0         POP     A
   \   00003C   F0           MOVX    @DPTR,A
    467            pData[SENSOR_PARENT_OFFSET + 1] =  LO_UINT16(parentShortAddr);
   \   00003D   90....       MOV     DPTR,#parentShortAddr
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F8           MOV     R0,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F9           MOV     R1,A
   \   000045   E8           MOV     A,R0
   \   000046   C0E0         PUSH    A
   \   000048   7403         MOV     A,#0x3
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   D0E0         POP     A
   \   00004F   F0           MOVX    @DPTR,A
    468          
    469            // Set ACK request on each ACK_INTERVAL report
    470            // If a report failed, set ACK request on next report
    471            if ( ++reportNr < ACK_REQ_INTERVAL && reportFailureNr == 0 )
   \   000050   90....       MOV     DPTR,#??reportNr
   \   000053   E0           MOVX    A,@DPTR
   \   000054   2401         ADD     A,#0x1
   \   000056   F0           MOVX    @DPTR,A
   \   000057   90....       MOV     DPTR,#??reportNr
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   C3           CLR     C
   \   00005C   9405         SUBB    A,#0x5
   \   00005E   500A         JNC     ??sendReport_0
   \   000060   90....       MOV     DPTR,#reportFailureNr
   \   000063   E0           MOVX    A,@DPTR
   \   000064   7004         JNZ     ??sendReport_0
    472            {
    473              txOptions = AF_TX_OPTIONS_NONE;
   \   000066   7E00         MOV     R6,#0x0
   \   000068   8008         SJMP    ??sendReport_1
    474            }
    475            else
    476            {
    477              txOptions = AF_MSG_ACK_REQUEST;
   \                     ??sendReport_0:
   \   00006A   7E10         MOV     R6,#0x10
    478              reportNr = 0;
   \   00006C   90....       MOV     DPTR,#??reportNr
   \   00006F   7400         MOV     A,#0x0
   \   000071   F0           MOVX    @DPTR,A
    479            }
    480            // Destination address 0xFFFE: Destination address is sent to previously
    481            // established binding for the commandId.
    482            zb_SendDataRequest( 0xFFFE, SENSOR_REPORT_CMD_ID, SENSOR_REPORT_LENGTH, pData, 0, txOptions, 0 );
   \                     ??sendReport_1:
   \   000072                ; Setup parameters for call to function zb_SendDataRequest
   \   000072   75..00       MOV     ?V0,#0x0
   \   000075   78..         MOV     R0,#?V0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   EE           MOV     A,R6
   \   00007B   F5..         MOV     ?V0,A
   \   00007D   78..         MOV     R0,#?V0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000082   75..00       MOV     ?V0,#0x0
   \   000085   78..         MOV     R0,#?V0
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008A   7403         MOV     A,#0x3
   \   00008C   12....       LCALL   ?XSTACK_DISP100_8
   \   00008F   88..         MOV     ?V0,R0
   \   000091   89..         MOV     ?V1,R1
   \   000093   78..         MOV     R0,#?V0
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000098   7904         MOV     R1,#0x4
   \   00009A   7C02         MOV     R4,#0x2
   \   00009C   7D00         MOV     R5,#0x0
   \   00009E   7AFE         MOV     R2,#-0x2
   \   0000A0   7BFF         MOV     R3,#-0x1
   \   0000A2   12....       LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
   \   0000A5   7405         MOV     A,#0x5
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
    483          }
   \   0000AA   7404         MOV     A,#0x4
   \   0000AC   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AF   7F02         MOV     R7,#0x2
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??reportNr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    484          
    485          /******************************************************************************
    486           * @fn          readTemp
    487           *
    488           * @brief       read temperature from ADC
    489           *
    490           * @param       none
    491           *
    492           * @return      temperature
    493           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    494          static int8 readTemp(void)
   \                     readTemp:
    495          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    496            static uint16 voltageAtTemp22;
    497            static uint8 bCalibrate = TRUE; // Calibrate the first time the temp sensor is read
    498            uint16 value;
    499            int8 temp;
    500          
    501            #if defined (HAL_MCU_CC2530)
    502            /*
    503             * Use the ADC to read the temperature
    504             */
    505            value = HalReadTemp();
   \   000005                ; Setup parameters for call to function HalReadTemp
   \   000005   12....       LCALL   `??HalReadTemp::?relay`; Banked call to: HalReadTemp
   \   000008   8A..         MOV     ?V2,R2
   \   00000A   8B..         MOV     ?V3,R3
   \   00000C   AE..         MOV     R6,?V2
   \   00000E   AF..         MOV     R7,?V3
    506          
    507            // Use the 12 MSB of adcValue
    508            value >>= 4;
   \   000010   8E..         MOV     ?V2,R6
   \   000012   8F..         MOV     ?V3,R7
   \   000014   7404         MOV     A,#0x4
   \   000016   78..         MOV     R0,#?V2
   \   000018   12....       LCALL   ?US_SHR
   \   00001B   AE..         MOV     R6,?V2
   \   00001D   AF..         MOV     R7,?V3
    509          
    510            /*
    511             * These parameters are typical values and need to be calibrated
    512             * See the datasheet for the appropriate chip for more details
    513             * also, the math below may not be very accurate
    514             */
    515            /* Assume ADC = 1480 at 25C and ADC = 4/C */
    516            #define VOLTAGE_AT_TEMP_25        1480
    517            #define TEMP_COEFFICIENT          4
    518          
    519            // Calibrate for 22C the first time the temp sensor is read.
    520            // This will assume that the demo is started up in temperature of 22C
    521            if ( bCalibrate ) {
   \   00001F   90....       MOV     DPTR,#??bCalibrate
   \   000022   E0           MOVX    A,@DPTR
   \   000023   600E         JZ      ??readTemp_0
    522              voltageAtTemp22 = value;
   \   000025   90....       MOV     DPTR,#??voltageAtTemp22
   \   000028   EE           MOV     A,R6
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   A3           INC     DPTR
   \   00002B   EF           MOV     A,R7
   \   00002C   F0           MOVX    @DPTR,A
    523              bCalibrate = FALSE;
   \   00002D   90....       MOV     DPTR,#??bCalibrate
   \   000030   7400         MOV     A,#0x0
   \   000032   F0           MOVX    @DPTR,A
    524            }
    525          
    526            temp = 22 + ( (value - voltageAtTemp22) / TEMP_COEFFICIENT );
   \                     ??readTemp_0:
   \   000033   90....       MOV     DPTR,#??voltageAtTemp22
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F8           MOV     R0,A
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   F9           MOV     R1,A
   \   00003B   EE           MOV     A,R6
   \   00003C   C3           CLR     C
   \   00003D   98           SUBB    A,R0
   \   00003E   F5..         MOV     ?V2,A
   \   000040   EF           MOV     A,R7
   \   000041   99           SUBB    A,R1
   \   000042   F5..         MOV     ?V3,A
   \   000044   7402         MOV     A,#0x2
   \   000046   78..         MOV     R0,#?V2
   \   000048   12....       LCALL   ?US_SHR
   \   00004B   E5..         MOV     A,?V2
   \   00004D   2416         ADD     A,#0x16
   \   00004F   F5..         MOV     ?V0,A
    527          
    528            // Set 0C as minimum temperature, and 100C as max
    529            if ( temp >= 100 )
   \   000051   E5..         MOV     A,?V0
   \   000053   C3           CLR     C
   \   000054   9464         SUBB    A,#0x64
   \   000056   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000058   65D0         XRL     A,PSW
   \   00005A   33           RLC     A
   \   00005B   4004         JC      ??readTemp_1
    530            {
    531              return 100;
   \   00005D   7964         MOV     R1,#0x64
   \   00005F   8012         SJMP    ??readTemp_2
    532            }
    533            else if ( temp <= 0 ) {
   \                     ??readTemp_1:
   \   000061   E5..         MOV     A,?V0
   \   000063   C3           CLR     C
   \   000064   9401         SUBB    A,#0x1
   \   000066   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000068   65D0         XRL     A,PSW
   \   00006A   33           RLC     A
   \   00006B   5004         JNC     ??readTemp_3
    534              return 0;
   \   00006D   7900         MOV     R1,#0x0
   \   00006F   8002         SJMP    ??readTemp_2
    535            }
    536            else {
    537              return temp;
   \                     ??readTemp_3:
   \   000071   A9..         MOV     R1,?V0
   \                     ??readTemp_2:
   \   000073   7F04         MOV     R7,#0x4
   \   000075   02....       LJMP    ?BANKED_LEAVE_XDATA
    538            }
    539            // Only CC2530 is supported
    540            #else
    541            return 0;
    542            #endif
    543          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??voltageAtTemp22:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
   \                     ??bCalibrate:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for bCalibrate>`
   \   000001                REQUIRE __INIT_XDATA_I
    544          
    545          /******************************************************************************
    546           * @fn          readVoltage
    547           *
    548           * @brief       read voltage from ADC
    549           *
    550           * @param       none
    551           *
    552           * @return      voltage
    553           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          static uint8 readVoltage(void)
   \                     readVoltage:
    555          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
    556            #if defined (HAL_MCU_CC2530)
    557            /*
    558             * Use the ADC to read the bus voltage
    559             */
    560            uint16 value = HalReadTemp();
   \   000005                ; Setup parameters for call to function HalReadTemp
   \   000005   12....       LCALL   `??HalReadTemp::?relay`; Banked call to: HalReadTemp
   \   000008   8A..         MOV     ?V0,R2
   \   00000A   8B..         MOV     ?V1,R3
   \   00000C   A8..         MOV     R0,?V0
   \   00000E   A9..         MOV     R1,?V1
    561          
    562            // value now contains measurement of Vdd/3
    563            // 0 indicates 0V and 32767 indicates 1.25V
    564            // voltage = (value*3*1.25)/32767 volts
    565            // we will multiply by this by 10 to allow units of 0.1 volts
    566            value = value >> 6;   // divide first by 2^6
   \   000010   88..         MOV     ?V0,R0
   \   000012   89..         MOV     ?V1,R1
   \   000014   7406         MOV     A,#0x6
   \   000016   78..         MOV     R0,#?V0
   \   000018   12....       LCALL   ?US_SHR
   \   00001B   A8..         MOV     R0,?V0
   \   00001D   A9..         MOV     R1,?V1
    567            value = (uint16)(value * 37.5);
   \   00001F   88..         MOV     ?V0,R0
   \   000021   89..         MOV     ?V1,R1
   \   000023   E4           CLR     A
   \   000024   F5..         MOV     ?V2,A
   \   000026   F5..         MOV     ?V3,A
   \   000028   78..         MOV     R0,#?V0
   \   00002A   12....       LCALL   ?UL_TO_FLT
   \   00002D   90....       MOV     DPTR,#__Constant_42160000
   \   000030   78..         MOV     R0,#?V4
   \   000032   12....       LCALL   ?L_MOV_X
   \   000035   78..         MOV     R0,#?V0
   \   000037   79..         MOV     R1,#?V4
   \   000039   12....       LCALL   ?FLT_MUL
   \   00003C   78..         MOV     R0,#?V0
   \   00003E   12....       LCALL   ?FLT_TO_L
   \   000041   A8..         MOV     R0,?V0
   \   000043   A9..         MOV     R1,?V1
    568            value = value >> 9;   // ...and later by 2^9...to prevent overflow during multiplication
   \   000045   88..         MOV     ?V0,R0
   \   000047   89..         MOV     ?V1,R1
   \   000049   7409         MOV     A,#0x9
   \   00004B   78..         MOV     R0,#?V0
   \   00004D   12....       LCALL   ?US_SHR
   \   000050   A8..         MOV     R0,?V0
   \   000052   A9..         MOV     R1,?V1
    569          
    570            return value;
   \   000054   E8           MOV     A,R0
   \   000055   F9           MOV     R1,A
   \   000056   7F08         MOV     R7,#0x8
   \   000058   02....       LJMP    ?BANKED_LEAVE_XDATA
    571            #else
    572            return 0;
    573            #endif // CC2530
    574          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myReportPeriod>`:
   \   000000   8813         DW 5000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myBindRetryDelay>`:
   \   000000   D007         DW 2000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myStartRetryDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for bCalibrate>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42160000:
   \   000000   00001642     DD 42160000H

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleOsalEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_StartConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SendDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_BindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_AllowBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_FindDeviceConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_ReceiveDataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uartRxCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??sendReport::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    sendReport

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??readTemp::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    readTemp

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??readVoltage::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    readVoltage

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     26   readTemp
        0     12   -> HalReadTemp
      0     30   readVoltage
        0     16   -> HalReadTemp
      1     31   sendReport
        0     14   -> readTemp
        0     14   -> readVoltage
        0     19   -> zb_SendDataRequest
      0      0   uartRxCB
      0      0   zb_AllowBindConfirm
      0     17   zb_BindConfirm
        0     13   -> HalLedSet
        0     13   -> osal_set_event
        0     17   -> osal_start_timerEx
        0     13   -> zb_SystemReset
      0      0   zb_FindDeviceConfirm
      0      9   zb_HandleKeys
        0      9   -> HalLedSet
        0      9   -> osal_set_event
      0     16   zb_HandleOsalEvent
        0     12   -> HalLedBlink
        0     16   -> osal_start_timerEx
        0     12   -> sendReport
        0     12   -> zb_BindDevice
        0     12   -> zb_StartRequest
      0      4   zb_ReceiveDataIndication
      0     16   zb_SendDataConfirm
        0     16   -> osal_start_timerEx
        0     12   -> osal_stop_timerEx
        0     12   -> zb_BindDevice
      0     16   zb_StartConfirm
        0     12   -> HalLedSet
        0     12   -> osal_set_event
        0     16   -> osal_start_timerEx
        0     12   -> zb_AllowBind
        0     12   -> zb_GetDeviceInfo


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for bCalibrate>
       2  ?<Initializer for myBindRetryDelay>
       2  ?<Initializer for myReportPeriod>
       1  ?<Initializer for myStartRetryDelay>
       1  P1DIR
       1  _A_P1
       4  __Constant_42160000
       1  appState
       1  bCalibrate
       1  bindRetries
       2  myBindRetryDelay
       2  myReportPeriod
       1  myStartRetryDelay
       2  parentShortAddr
     120  readTemp
       6  readTemp::?relay
      91  readVoltage
       6  readVoltage::?relay
       1  reportFailureNr
       1  reportNr
       1  reportState
     180  sendReport
       6  sendReport::?relay
       3  uartRxCB
       6  uartRxCB::?relay
       2  voltageAtTemp22
       3  zb_AllowBindConfirm
       6  zb_AllowBindConfirm::?relay
     114  zb_BindConfirm
       6  zb_BindConfirm::?relay
       3  zb_FindDeviceConfirm
       6  zb_FindDeviceConfirm::?relay
      65  zb_HandleKeys
       6  zb_HandleKeys::?relay
     141  zb_HandleOsalEvent
       6  zb_HandleOsalEvent::?relay
       2  zb_OutCmdList
       3  zb_ReceiveDataIndication
       6  zb_ReceiveDataIndication::?relay
     117  zb_SendDataConfirm
       6  zb_SendDataConfirm::?relay
      12  zb_SimpleDesc
     102  zb_StartConfirm
       6  zb_StartConfirm::?relay

 
 942 bytes in segment BANKED_CODE
  72 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
   6 bytes in segment XDATA_I
   6 bytes in segment XDATA_ID
  18 bytes in segment XDATA_ROM_C
   9 bytes in segment XDATA_Z
 
 1 020 bytes of CODE  memory
    14 bytes of CONST memory (+ 4 bytes shared)
     0 bytes of DATA  memory (+ 2 bytes shared)
    15 bytes of XDATA memory

Errors: none
Warnings: none

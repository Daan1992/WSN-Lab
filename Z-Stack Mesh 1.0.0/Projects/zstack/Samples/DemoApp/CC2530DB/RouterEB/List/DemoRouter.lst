###############################################################################
#
# IAR C/C++ Compiler V9.20.1.2476 for 8051                25/Mar/2016  20:46:30
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\Source\DemoRouter.c
#    Command line       =  
#        -f "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg"
#        (-DCPU32MHZ -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8 -DMAC_CFG_RX_MAX=5
#        -DRTR_NWK) -f "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x02000000 -DDEFAULT_CHANLIST=0x00000800
#        -DZDAPP_CONFIG_PAN_ID=0x1AAD -DNWK_START_DELAY=100
#        -DEXTENDED_JOINING_RANDOM_MASK=0x007F -DBEACON_REQUEST_DELAY=100
#        -DBEACON_REQ_DELAY_MASK=0x00FF -DLINK_STATUS_JITTER_MASK=0x007F
#        -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_POLLED=3000
#        -DNWK_INDIRECT_MSG_TIMEOUT=7 -DMAX_RREQ_ENTRIES=8
#        -DAPSC_MAX_FRAME_RETRIES=3 -DNWK_MAX_DATA_RETRIES=2
#        -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9 -DAPS_MAX_GROUPS=16
#        -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)
#        -DREJOIN_POLL_RATE=440 "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\DemoApp\Source\DemoRouter.c" -D
#        HOLD_AUTO_START -D BUILD_ALL_DEVICES -D NV_INIT -D
#        DEVICE_LOGICAL_TYPE=ZG_DEVICETYPE_ROUTER -lC
#        "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\RouterEB\List\" -lA
#        "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\RouterEB\List\"
#        --diag_suppress Pe001,Pa010,Pe1665 -o
#        "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\RouterEB\Obj\" -e
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa --debug
#        --core=plain --dptr=16,1 --data_model=large --code_model=banked
#        --calling_convention=xdata_reentrant --place_constants=data_rom
#        --nr_virtual_regs 16 -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack
#        Mesh 1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\" -I
#        "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\Source\" -I
#        "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\ZMain\TI2530DB\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\include\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\hal\target\CC2530EB\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\include\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\mt\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\osal\include\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\saddr\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\services\sdata\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\af\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\nwk\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sec\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\sys\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\stack\zdo\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\"
#        -I "C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\..\..\..\..\..\Components\zmac\f8w\"
#        -On --require_prototypes
#    List file          =  
#        C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\RouterEB\List\DemoRouter.lst
#    Object file        =  
#        C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh
#        1.0.0\Projects\zstack\Samples\DemoApp\CC2530DB\RouterEB\Obj\DemoRouter.r51
#
###############################################################################

C:\Users\DLeijen\Documents\WSN-Lab\Z-Stack Mesh 1.0.0\Projects\zstack\Samples\DemoApp\Source\DemoRouter.c
      1          /**************************************************************************************************
      2            Filename:       DemoRouter.c
      3          
      4            Description:    Router application for the sensor demo utilizing the Simple API.
      5          
      6                            The sensor application binds to a gateway and will periodically
      7                            read temperature and supply voltage from the ADC and send report
      8                            towards the gateway node.
      9          
     10          
     11            Copyright 2009 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /******************************************************************************
     43           * INCLUDES
     44           */
     45          
     46          #include "ZComDef.h"
     47          #include "OSAL.h"
     48          #include "sapi.h"
     49          #include "hal_key.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1
     50          #include "hal_lcd.h"
     51          #include "hal_led.h"
     52          #include "hal_adc.h"
     53          #include "hal_mcu.h"
     54          #include "hal_uart.h"
     55          #include "OSAL_NV.h"
     56          #include "DemoApp.h"
     57          #include "APS.h"
     58          
     59          /******************************************************************************
     60           * CONSTANTS
     61           */
     62          #define REPORT_FAILURE_LIMIT                3
     63          #define ACK_REQ_INTERVAL                    5 // each 5th packet is sent with ACK request
     64          
     65          // Application States
     66          #define APP_INIT                            0    // Initial state
     67          #define APP_START                           1    // Sensor has joined network
     68          #define APP_BIND                            2    // Sensor is in process of binding
     69          #define APP_REPORT                          4    // Sensor is in reporting state
     70          
     71          //LED constants
     72          #define LED_PORT                            1
     73          #define LED_PIN                             2
     74          
     75          // Application osal event identifiers
     76          // Bit mask of events ( from 0x0000 to 0x00FF )
     77          #define MY_START_EVT                        0x0001
     78          #define MY_REPORT_EVT                       0x0002
     79          #define MY_FIND_COLLECTOR_EVT               0x0004
     80          
     81          // ADC definitions for CC2430/CC2530 from the hal_adc.c file
     82          #if defined (HAL_MCU_CC2530)
     83          #define HAL_ADC_REF_125V    0x00    /* Internal 1.25V Reference */
     84          #define HAL_ADC_DEC_064     0x00    /* Decimate by 64 : 8-bit resolution */
     85          #define HAL_ADC_DEC_128     0x10    /* Decimate by 128 : 10-bit resolution */
     86          #define HAL_ADC_DEC_512     0x30    /* Decimate by 512 : 14-bit resolution */
     87          #define HAL_ADC_CHN_VDD3    0x0f    /* Input channel: VDD/3 */
     88          #define HAL_ADC_CHN_TEMP    0x0e    /* Temperature sensor */
     89          #endif // HAL_MCU_CC2530
     90          
     91          /******************************************************************************
     92           * TYPEDEFS
     93           */
     94          
     95          /******************************************************************************
     96           * LOCAL VARIABLES
     97           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     98          static uint8  appState =          APP_INIT;
   \                     appState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     99          static uint8  reportState =       FALSE;
   \                     reportState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    100          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    101          static uint8 reportFailureNr =    0;
   \                     reportFailureNr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    102          static uint8 bindRetries =        0;
   \                     bindRetries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    103          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    104          static uint16 myReportPeriod =    5000;         // milliseconds
   \                     myReportPeriod:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myReportPeriod>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    105          static uint16 myBindRetryDelay =  2000;         // milliseconds
   \                     myBindRetryDelay:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for myBindRetryDelay>`
   \   000002                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_I, align 1, keep-with-next
    106          static uint8 myStartRetryDelay =  10;           // milliseconds
   \                     myStartRetryDelay:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for myStartRetryDelay>`
   \   000001                REQUIRE __INIT_XDATA_I
    107          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    108          static uint16 parentShortAddr;
   \                     parentShortAddr:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    109          
    110          /******************************************************************************
    111           * GLOBAL VARIABLES
    112           */
    113          
    114          // Inputs and Outputs for Sensor device
    115          #define NUM_OUT_CMD        1
    116          #define NUM_IN_CMD         2
    117          
    118          // List of output and input commands for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    119          const cId_t zb_OutCmdList[NUM_OUT_CMD] =
   \                     zb_OutCmdList:
   \   000000   0300         DW 3
    120          {
    121            ROUTER_REPORT_CMD_ID
    122          };
    123          

   \                                 In  segment XDATA_ROM_C, align 1
    124          const cId_t zb_InCmdList[NUM_IN_CMD] =
   \                     zb_InCmdList:
   \   000000   0200         DW 2
   \   000002   0400         DW 4
    125          {
    126            BUTTON_REPORT_CMD_ID,
    127             COORD_REPORT_CMD_ID,
    128          };
    129          
    130          // Define SimpleDescriptor for Sensor device

   \                                 In  segment XDATA_ROM_C, align 1
    131          const SimpleDescriptionFormat_t zb_SimpleDesc =
   \                     zb_SimpleDesc:
   \   000000   02           DB 2
   \   000001   200F         DW 3872
   \   000003   0300         DW 3
   \   000005   01           DB 1
   \   000006   02           DB 2
   \   000007   ....         DW zb_InCmdList
   \   000009   01           DB 1
   \   00000A   ....         DW zb_OutCmdList
    132          {
    133            MY_ENDPOINT_ID,             //  Endpoint
    134            MY_PROFILE_ID,              //  Profile ID
    135            DEV_ID_ROUTER,              //  Device ID
    136            DEVICE_VERSION_SENSOR,      //  Device Version
    137            0,                          //  Reserved
    138            NUM_IN_CMD,                 //  Number of Input Commands
    139            (cId_t *) zb_InCmdList,     //  Input Command List
    140            NUM_OUT_CMD,                //  Number of Output Commands
    141            (cId_t *) zb_OutCmdList     //  Output Command List
    142          };
    143          
    144          
    145          
    146          /******************************************************************************
    147           * LOCAL FUNCTIONS
    148           */
    149          
    150          void uartRxCB( uint8 port, uint8 event );
    151          
    152          /*****************************************************************************
    153           * @fn          zb_HandleOsalEvent
    154           *
    155           * @brief       The zb_HandleOsalEvent function is called by the operating
    156           *              system when a task event is set
    157           *
    158           * @param       event - Bitmask containing the events that have been set
    159           *
    160           * @return      none
    161           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    162          void zb_HandleOsalEvent( uint16 event )
   \                     zb_HandleOsalEvent:
    163          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    164            if( event & SYS_EVENT_MSG )
    165            {
    166            }
    167          
    168            if( event & ZB_ENTRY_EVENT )
   \   000009   EE           MOV     A,R6
   \   00000A   5400         ANL     A,#0x0
   \   00000C   F8           MOV     R0,A
   \   00000D   EF           MOV     A,R7
   \   00000E   5410         ANL     A,#0x10
   \   000010   F9           MOV     R1,A
   \   000011   E8           MOV     A,R0
   \   000012   49           ORL     A,R1
   \   000013   6013         JZ      ??zb_HandleOsalEvent_0
    169            {
    170              // blind LED 1 to indicate joining a network
    171              HalLedBlink ( HAL_LED_1, 0, 50, 500 );
   \   000015                ; Setup parameters for call to function HalLedBlink
   \   000015   7CF4         MOV     R4,#-0xc
   \   000017   7D01         MOV     R5,#0x1
   \   000019   7B32         MOV     R3,#0x32
   \   00001B   7A00         MOV     R2,#0x0
   \   00001D   7901         MOV     R1,#0x1
   \   00001F   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    172          
    173              // Start the device
    174              zb_StartRequest();
   \   000022                ; Setup parameters for call to function zb_StartRequest
   \   000022   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    175              
    176              MCU_IO_DIR_OUTPUT(LED_PORT, LED_PIN);
   \   000025   43FE04       ORL     0xfe,#0x4
    177            }
    178          
    179            if ( event & MY_START_EVT )
   \                     ??zb_HandleOsalEvent_0:
   \   000028   EE           MOV     A,R6
   \   000029   A2E0         MOV     C,0xE0 /* A   */.0
   \   00002B   5003         JNC     ??zb_HandleOsalEvent_1
    180            {
    181              zb_StartRequest();
   \   00002D                ; Setup parameters for call to function zb_StartRequest
   \   00002D   12....       LCALL   `??zb_StartRequest::?relay`; Banked call to: zb_StartRequest
    182            }
    183          
    184            if ( event & MY_REPORT_EVT )
   \                     ??zb_HandleOsalEvent_1:
   \   000030   EE           MOV     A,R6
   \   000031   5402         ANL     A,#0x2
   \   000033   602E         JZ      ??zb_HandleOsalEvent_2
    185            {
    186              if ( appState == APP_REPORT )
   \   000035   90....       MOV     DPTR,#appState
   \   000038   E0           MOVX    A,@DPTR
   \   000039   6404         XRL     A,#0x4
   \   00003B   7026         JNZ     ??zb_HandleOsalEvent_2
    187              {
    188                osal_start_timerEx( sapi_TaskID, MY_REPORT_EVT, myReportPeriod );
   \   00003D                ; Setup parameters for call to function osal_start_timerEx
   \   00003D   90....       MOV     DPTR,#myReportPeriod
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F5..         MOV     ?V1,A
   \   000047   E4           CLR     A
   \   000048   F5..         MOV     ?V2,A
   \   00004A   F5..         MOV     ?V3,A
   \   00004C   78..         MOV     R0,#?V0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000051   7A02         MOV     R2,#0x2
   \   000053   7B00         MOV     R3,#0x0
   \   000055   90....       MOV     DPTR,#sapi_TaskID
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F9           MOV     R1,A
   \   00005A   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00005D   7404         MOV     A,#0x4
   \   00005F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000062   E9           MOV     A,R1
    189              }
    190            }
    191          
    192            if ( event & MY_FIND_COLLECTOR_EVT )
   \                     ??zb_HandleOsalEvent_2:
   \   000063   EE           MOV     A,R6
   \   000064   5404         ANL     A,#0x4
   \   000066   6020         JZ      ??zb_HandleOsalEvent_3
    193            {
    194              // blind LED 2 to indicate discovery and binding
    195              HalLedBlink ( HAL_LED_2, 0, 50, 500 );
   \   000068                ; Setup parameters for call to function HalLedBlink
   \   000068   7CF4         MOV     R4,#-0xc
   \   00006A   7D01         MOV     R5,#0x1
   \   00006C   7B32         MOV     R3,#0x32
   \   00006E   7A00         MOV     R2,#0x0
   \   000070   7902         MOV     R1,#0x2
   \   000072   12....       LCALL   `??HalLedBlink::?relay`; Banked call to: HalLedBlink
    196          
    197              appState = APP_BIND;
   \   000075   90....       MOV     DPTR,#appState
   \   000078   7402         MOV     A,#0x2
   \   00007A   F0           MOVX    @DPTR,A
    198              // Find and bind to a collector device
    199              zb_BindDevice( TRUE, ROUTER_REPORT_CMD_ID, (uint8 *)NULL );
   \   00007B                ; Setup parameters for call to function zb_BindDevice
   \   00007B   7C00         MOV     R4,#0x0
   \   00007D   7D00         MOV     R5,#0x0
   \   00007F   7A03         MOV     R2,#0x3
   \   000081   7B00         MOV     R3,#0x0
   \   000083   7901         MOV     R1,#0x1
   \   000085   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
    200            }
    201          }
   \                     ??zb_HandleOsalEvent_3:
   \   000088   7F04         MOV     R7,#0x4
   \   00008A   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00008D                REQUIRE P1DIR
    202          
    203          /******************************************************************************
    204           * @fn      zb_HandleKeys
    205           *
    206           * @brief   Handles all key events for this device.
    207           *
    208           * @param   shift - true if in shift/alt.
    209           * @param   keys - bit field for key events. Valid entries:
    210           *                 EVAL_SW4
    211           *                 EVAL_SW3
    212           *                 EVAL_SW2
    213           *                 EVAL_SW1
    214           *
    215           * @return  none
    216           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    217          void zb_HandleKeys( uint8 shift, uint8 keys )
   \                     zb_HandleKeys:
    218          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FF           MOV     R7,A
   \   00000C   8A..         MOV     ?V0,R2
    219            // Shift is used to make each button/switch dual purpose.
    220            if ( shift )
   \   00000E   EF           MOV     A,R7
   \   00000F   6003         JZ      $+5
   \   000011   02....       LJMP    ??zb_HandleKeys_0 & 0xFFFF
    221            {
    222              if ( keys & HAL_KEY_SW_1 )
    223              {
    224              }
    225              if ( keys & HAL_KEY_SW_2 )
    226              {
    227              }
    228              if ( keys & HAL_KEY_SW_3 )
    229              {
    230              }
    231              if ( keys & HAL_KEY_SW_4 )
    232              {
    233              }
    234            }
    235            else
    236            {
    237              if ( keys & HAL_KEY_SW_1 )
   \   000014   E5..         MOV     A,?V0
   \   000016   A2E0         MOV     C,0xE0 /* A   */.0
   \   000018   5021         JNC     ??zb_HandleKeys_1
    238              {
    239                // Start reporting
    240                if ( reportState == FALSE ) {
   \   00001A   90....       MOV     DPTR,#reportState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   701B         JNZ     ??zb_HandleKeys_1
    241                  osal_set_event( sapi_TaskID, MY_REPORT_EVT );
   \   000020                ; Setup parameters for call to function osal_set_event
   \   000020   7A02         MOV     R2,#0x2
   \   000022   7B00         MOV     R3,#0x0
   \   000024   90....       MOV     DPTR,#sapi_TaskID
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F9           MOV     R1,A
   \   000029   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00002C   E9           MOV     A,R1
    242                  reportState = TRUE;
   \   00002D   90....       MOV     DPTR,#reportState
   \   000030   7401         MOV     A,#0x1
   \   000032   F0           MOVX    @DPTR,A
    243                  HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   000033                ; Setup parameters for call to function HalLedSet
   \   000033   7A01         MOV     R2,#0x1
   \   000035   7902         MOV     R1,#0x2
   \   000037   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00003A   E9           MOV     A,R1
    244                }
    245              }
    246              if ( keys & HAL_KEY_SW_2 )
   \                     ??zb_HandleKeys_1:
   \   00003B   E5..         MOV     A,?V0
   \   00003D   A2E1         MOV     C,0xE0 /* A   */.1
   \   00003F   5063         JNC     ??zb_HandleKeys_0
    247              {
    248                uint8 pData[1];
    249                static uint8 reportNr = 0;
    250                uint8 txOptions;
    251            
    252                pData[0] = DOOR_BUTTON_PRESSED;
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   74F0         MOV     A,#-0x10
   \   000049   F0           MOVX    @DPTR,A
    253                if ( ++reportNr < ACK_REQ_INTERVAL && reportFailureNr == 0 )
   \   00004A   90....       MOV     DPTR,#??reportNr
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   2401         ADD     A,#0x1
   \   000050   F0           MOVX    @DPTR,A
   \   000051   90....       MOV     DPTR,#??reportNr
   \   000054   E0           MOVX    A,@DPTR
   \   000055   C3           CLR     C
   \   000056   9405         SUBB    A,#0x5
   \   000058   500A         JNC     ??zb_HandleKeys_2
   \   00005A   90....       MOV     DPTR,#reportFailureNr
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   7004         JNZ     ??zb_HandleKeys_2
    254                {
    255                  txOptions = AF_TX_OPTIONS_NONE;
   \   000060   7E00         MOV     R6,#0x0
   \   000062   8008         SJMP    ??zb_HandleKeys_3
    256                }
    257                else
    258                {
    259                  txOptions = AF_MSG_ACK_REQUEST;
   \                     ??zb_HandleKeys_2:
   \   000064   7E10         MOV     R6,#0x10
    260                  reportNr = 0;
   \   000066   90....       MOV     DPTR,#??reportNr
   \   000069   7400         MOV     A,#0x0
   \   00006B   F0           MOVX    @DPTR,A
    261                }
    262                zb_SendDataRequest( 0xFFFF, ROUTER_REPORT_CMD_ID, 1, pData, 0, txOptions, 0 );
   \                     ??zb_HandleKeys_3:
   \   00006C                ; Setup parameters for call to function zb_SendDataRequest
   \   00006C   75..00       MOV     ?V1,#0x0
   \   00006F   78..         MOV     R0,#?V1
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000074   EE           MOV     A,R6
   \   000075   F5..         MOV     ?V1,A
   \   000077   78..         MOV     R0,#?V1
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007C   75..00       MOV     ?V1,#0x0
   \   00007F   78..         MOV     R0,#?V1
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000084   7403         MOV     A,#0x3
   \   000086   12....       LCALL   ?XSTACK_DISP100_8
   \   000089   88..         MOV     ?V2,R0
   \   00008B   89..         MOV     ?V3,R1
   \   00008D   78..         MOV     R0,#?V2
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000092   7901         MOV     R1,#0x1
   \   000094   7C03         MOV     R4,#0x3
   \   000096   7D00         MOV     R5,#0x0
   \   000098   7AFF         MOV     R2,#-0x1
   \   00009A   7BFF         MOV     R3,#-0x1
   \   00009C   12....       LCALL   `??zb_SendDataRequest::?relay`; Banked call to: zb_SendDataRequest
   \   00009F   7405         MOV     A,#0x5
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
    263              }
    264              if ( keys & HAL_KEY_SW_3 )
    265              {
    266              }
    267              if ( keys & HAL_KEY_SW_4 )
    268              {
    269              }
    270            }
    271          }
   \                     ??zb_HandleKeys_0:
   \   0000A4   7401         MOV     A,#0x1
   \   0000A6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A9   7F04         MOV     R7,#0x4
   \   0000AB   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??reportNr:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    272          
    273          /******************************************************************************
    274           * @fn          zb_StartConfirm
    275           *
    276           * @brief       The zb_StartConfirm callback is called by the ZigBee stack
    277           *              after a start request operation completes
    278           *
    279           * @param       status - The status of the start operation.  Status of
    280           *                       ZB_SUCCESS indicates the start operation completed
    281           *                       successfully.  Else the status is an error code.
    282           *
    283           * @return      none
    284           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    285          void zb_StartConfirm( uint8 status )
   \                     zb_StartConfirm:
    286          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    287            // If the device sucessfully started, change state to running
    288            if ( status == ZB_SUCCESS )
   \   000007   EE           MOV     A,R6
   \   000008   7033         JNZ     ??zb_StartConfirm_0
    289            {
    290              // Set LED 1 to indicate that node is operational on the network
    291              HalLedSet( HAL_LED_1, HAL_LED_MODE_ON );
   \   00000A                ; Setup parameters for call to function HalLedSet
   \   00000A   7A01         MOV     R2,#0x1
   \   00000C   7901         MOV     R1,#0x1
   \   00000E   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   000011   E9           MOV     A,R1
    292          
    293              // Change application state
    294              appState = APP_START;
   \   000012   90....       MOV     DPTR,#appState
   \   000015   7401         MOV     A,#0x1
   \   000017   F0           MOVX    @DPTR,A
    295          
    296              // Set event to bind to a collector
    297              osal_set_event( sapi_TaskID, MY_FIND_COLLECTOR_EVT );
   \   000018                ; Setup parameters for call to function osal_set_event
   \   000018   7A04         MOV     R2,#0x4
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   90....       MOV     DPTR,#sapi_TaskID
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F9           MOV     R1,A
   \   000021   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   000024   E9           MOV     A,R1
    298          
    299              // Store parent short address
    300              zb_GetDeviceInfo(ZB_INFO_PARENT_SHORT_ADDR, &parentShortAddr);
   \   000025                ; Setup parameters for call to function zb_GetDeviceInfo
   \   000025   7A..         MOV     R2,#parentShortAddr & 0xff
   \   000027   7B..         MOV     R3,#(parentShortAddr >> 8) & 0xff
   \   000029   7903         MOV     R1,#0x3
   \   00002B   12....       LCALL   `??zb_GetDeviceInfo::?relay`; Banked call to: zb_GetDeviceInfo
    301          
    302              // Turn ON Allow Bind mode infinitly
    303              zb_AllowBind( 0xFF );
   \   00002E                ; Setup parameters for call to function zb_AllowBind
   \   00002E   79FF         MOV     R1,#-0x1
   \   000030   12....       LCALL   `??zb_AllowBind::?relay`; Banked call to: zb_AllowBind
    304              HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   000033                ; Setup parameters for call to function HalLedSet
   \   000033   7A01         MOV     R2,#0x1
   \   000035   7902         MOV     R1,#0x2
   \   000037   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00003A   E9           MOV     A,R1
   \   00003B   8024         SJMP    ??zb_StartConfirm_1
    305            }
    306            else
    307            {
    308              // Try again later with a delay
    309              osal_start_timerEx( sapi_TaskID, MY_START_EVT, myStartRetryDelay );
   \                     ??zb_StartConfirm_0:
   \   00003D                ; Setup parameters for call to function osal_start_timerEx
   \   00003D   90....       MOV     DPTR,#myStartRetryDelay
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V0,A
   \   000043   E4           CLR     A
   \   000044   F5..         MOV     ?V1,A
   \   000046   F5..         MOV     ?V2,A
   \   000048   F5..         MOV     ?V3,A
   \   00004A   78..         MOV     R0,#?V0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00004F   7A01         MOV     R2,#0x1
   \   000051   7B00         MOV     R3,#0x0
   \   000053   90....       MOV     DPTR,#sapi_TaskID
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F9           MOV     R1,A
   \   000058   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00005B   7404         MOV     A,#0x4
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000060   E9           MOV     A,R1
    310            }
    311          }
   \                     ??zb_StartConfirm_1:
   \   000061   7F04         MOV     R7,#0x4
   \   000063   02....       LJMP    ?BANKED_LEAVE_XDATA
    312          
    313          /******************************************************************************
    314           * @fn          zb_SendDataConfirm
    315           *
    316           * @brief       The zb_SendDataConfirm callback function is called by the
    317           *              ZigBee after a send data operation completes
    318           *
    319           * @param       handle - The handle identifying the data transmission.
    320           *              status - The status of the operation.
    321           *
    322           * @return      none
    323           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    324          void zb_SendDataConfirm( uint8 handle, uint8 status )
   \                     zb_SendDataConfirm:
    325          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    326            if( status != ZB_SUCCESS )
   \   000009   EF           MOV     A,R7
   \   00000A   605E         JZ      ??zb_SendDataConfirm_0
    327            {
    328              if ( ++reportFailureNr >= REPORT_FAILURE_LIMIT )
   \   00000C   90....       MOV     DPTR,#reportFailureNr
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   2401         ADD     A,#0x1
   \   000012   F0           MOVX    @DPTR,A
   \   000013   90....       MOV     DPTR,#reportFailureNr
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C3           CLR     C
   \   000018   9403         SUBB    A,#0x3
   \   00001A   4074         JC      ??zb_SendDataConfirm_1
    329              {
    330                 // Stop reporting
    331                 osal_stop_timerEx( sapi_TaskID, MY_REPORT_EVT );
   \   00001C                ; Setup parameters for call to function osal_stop_timerEx
   \   00001C   7A02         MOV     R2,#0x2
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   90....       MOV     DPTR,#sapi_TaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   `??osal_stop_timerEx::?relay`; Banked call to: osal_stop_timerEx
   \   000028   E9           MOV     A,R1
    332          
    333                 // After failure start reporting automatically when the device
    334                 // is binded to a new gateway
    335                 reportState = TRUE;
   \   000029   90....       MOV     DPTR,#reportState
   \   00002C   7401         MOV     A,#0x1
   \   00002E   F0           MOVX    @DPTR,A
    336          
    337                 // Delete previous binding
    338                 zb_BindDevice( FALSE, ROUTER_REPORT_CMD_ID, (uint8 *)NULL );
   \   00002F                ; Setup parameters for call to function zb_BindDevice
   \   00002F   7C00         MOV     R4,#0x0
   \   000031   7D00         MOV     R5,#0x0
   \   000033   7A03         MOV     R2,#0x3
   \   000035   7B00         MOV     R3,#0x0
   \   000037   7900         MOV     R1,#0x0
   \   000039   12....       LCALL   `??zb_BindDevice::?relay`; Banked call to: zb_BindDevice
    339          
    340                // Try to bind a new gateway
    341                 osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
   \   00003C                ; Setup parameters for call to function osal_start_timerEx
   \   00003C   90....       MOV     DPTR,#myBindRetryDelay
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   F5..         MOV     ?V0,A
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F5..         MOV     ?V1,A
   \   000046   E4           CLR     A
   \   000047   F5..         MOV     ?V2,A
   \   000049   F5..         MOV     ?V3,A
   \   00004B   78..         MOV     R0,#?V0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000050   7A04         MOV     R2,#0x4
   \   000052   7B00         MOV     R3,#0x0
   \   000054   90....       MOV     DPTR,#sapi_TaskID
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   E9           MOV     A,R1
    342                 reportFailureNr = 0;
   \   000062   90....       MOV     DPTR,#reportFailureNr
   \   000065   7400         MOV     A,#0x0
   \   000067   F0           MOVX    @DPTR,A
   \   000068   8026         SJMP    ??zb_SendDataConfirm_1
    343              }
    344            }
    345            // status == SUCCESS
    346            else
    347            {
    348              // Reset failure counter
    349              reportFailureNr = 0;
   \                     ??zb_SendDataConfirm_0:
   \   00006A   90....       MOV     DPTR,#reportFailureNr
   \   00006D   7400         MOV     A,#0x0
   \   00006F   F0           MOVX    @DPTR,A
    350              MCU_IO_DIR_OUTPUT(LED_PORT, LED_PIN);
   \   000070   43FE04       ORL     0xfe,#0x4
    351              MCU_IO_SET_HIGH(LED_PORT, LED_PIN);
   \   000073   D292         SETB    0x90.2
    352              for (int i = 0; i < 10000; i++)
   \   000075   7800         MOV     R0,#0x0
   \   000077   7900         MOV     R1,#0x0
   \                     ??zb_SendDataConfirm_2:
   \   000079   C3           CLR     C
   \   00007A   E8           MOV     A,R0
   \   00007B   9410         SUBB    A,#0x10
   \   00007D   E9           MOV     A,R1
   \   00007E   9427         SUBB    A,#0x27
   \   000080   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000082   65D0         XRL     A,PSW
   \   000084   33           RLC     A
   \   000085   5007         JNC     ??zb_SendDataConfirm_3
   \   000087   08           INC     R0
   \   000088   E8           MOV     A,R0
   \   000089   70EE         JNZ     ??zb_SendDataConfirm_2
   \   00008B   09           INC     R1
   \   00008C   80EB         SJMP    ??zb_SendDataConfirm_2
    353              {
    354              }
    355              MCU_IO_SET_LOW(LED_PORT, LED_PIN);
   \                     ??zb_SendDataConfirm_3:
   \   00008E   C292         CLR     0x90.2
    356            }
    357          }
   \                     ??zb_SendDataConfirm_1:
   \   000090   7F04         MOV     R7,#0x4
   \   000092   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000095                REQUIRE P1DIR
   \   000095                REQUIRE _A_P1
    358          
    359          /******************************************************************************
    360           * @fn          zb_BindConfirm
    361           *
    362           * @brief       The zb_BindConfirm callback is called by the ZigBee stack
    363           *              after a bind operation completes.
    364           *
    365           * @param       commandId - The command ID of the binding being confirmed.
    366           *              status - The status of the bind operation.
    367           *
    368           * @return      none
    369           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    370          void zb_BindConfirm( uint16 commandId, uint8 status )
   \                     zb_BindConfirm:
    371          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V4,R1
    372            if( status == ZB_SUCCESS )
   \   00000B   E5..         MOV     A,?V4
   \   00000D   7023         JNZ     ??zb_BindConfirm_0
    373            {
    374              appState = APP_REPORT;
   \   00000F   90....       MOV     DPTR,#appState
   \   000012   7404         MOV     A,#0x4
   \   000014   F0           MOVX    @DPTR,A
    375              HalLedSet( HAL_LED_2, HAL_LED_MODE_OFF );
   \   000015                ; Setup parameters for call to function HalLedSet
   \   000015   7A00         MOV     R2,#0x0
   \   000017   7902         MOV     R1,#0x2
   \   000019   12....       LCALL   `??HalLedSet::?relay`; Banked call to: HalLedSet
   \   00001C   E9           MOV     A,R1
    376          
    377              // After failure reporting start automatically when the device
    378              // is binded to a new gateway
    379              if ( reportState )
   \   00001D   90....       MOV     DPTR,#reportState
   \   000020   E0           MOVX    A,@DPTR
   \   000021   604A         JZ      ??zb_BindConfirm_1
    380              {
    381                // Start reporting
    382                osal_set_event( sapi_TaskID, MY_REPORT_EVT );
   \   000023                ; Setup parameters for call to function osal_set_event
   \   000023   7A02         MOV     R2,#0x2
   \   000025   7B00         MOV     R3,#0x0
   \   000027   90....       MOV     DPTR,#sapi_TaskID
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F9           MOV     R1,A
   \   00002C   12....       LCALL   `??osal_set_event::?relay`; Banked call to: osal_set_event
   \   00002F   E9           MOV     A,R1
   \   000030   803B         SJMP    ??zb_BindConfirm_1
    383              }
    384            }
    385            else
    386            {
    387              if ( ++bindRetries >= 2 ) {
   \                     ??zb_BindConfirm_0:
   \   000032   90....       MOV     DPTR,#bindRetries
   \   000035   E0           MOVX    A,@DPTR
   \   000036   2401         ADD     A,#0x1
   \   000038   F0           MOVX    @DPTR,A
   \   000039   90....       MOV     DPTR,#bindRetries
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   C3           CLR     C
   \   00003E   9402         SUBB    A,#0x2
   \   000040   4005         JC      ??zb_BindConfirm_2
    388                // Reset the system
    389                zb_SystemReset();
   \   000042                ; Setup parameters for call to function zb_SystemReset
   \   000042   12....       LCALL   `??zb_SystemReset::?relay`; Banked call to: zb_SystemReset
   \   000045   8026         SJMP    ??zb_BindConfirm_1
    390              }
    391              else
    392              {
    393                osal_start_timerEx( sapi_TaskID, MY_FIND_COLLECTOR_EVT, myBindRetryDelay );
   \                     ??zb_BindConfirm_2:
   \   000047                ; Setup parameters for call to function osal_start_timerEx
   \   000047   90....       MOV     DPTR,#myBindRetryDelay
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F5..         MOV     ?V0,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V1,A
   \   000051   E4           CLR     A
   \   000052   F5..         MOV     ?V2,A
   \   000054   F5..         MOV     ?V3,A
   \   000056   78..         MOV     R0,#?V0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00005B   7A04         MOV     R2,#0x4
   \   00005D   7B00         MOV     R3,#0x0
   \   00005F   90....       MOV     DPTR,#sapi_TaskID
   \   000062   E0           MOVX    A,@DPTR
   \   000063   F9           MOV     R1,A
   \   000064   12....       LCALL   `??osal_start_timerEx::?relay`; Banked call to: osal_start_timerEx
   \   000067   7404         MOV     A,#0x4
   \   000069   12....       LCALL   ?DEALLOC_XSTACK8
   \   00006C   E9           MOV     A,R1
    394              }
    395            }
    396          }
   \                     ??zb_BindConfirm_1:
   \   00006D   7F05         MOV     R7,#0x5
   \   00006F   02....       LJMP    ?BANKED_LEAVE_XDATA
    397          
    398          /******************************************************************************
    399           * @fn          zb_AllowBindConfirm
    400           *
    401           * @brief       Indicates when another device attempted to bind to this device
    402           *
    403           * @param
    404           *
    405           * @return      none
    406           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    407          void zb_AllowBindConfirm( uint16 source )
   \                     zb_AllowBindConfirm:
    408          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    409            (void)source;
    410          }
   \   000000   02....       LJMP    ?BRET
    411          
    412          /******************************************************************************
    413           * @fn          zb_FindDeviceConfirm
    414           *
    415           * @brief       The zb_FindDeviceConfirm callback function is called by the
    416           *              ZigBee stack when a find device operation completes.
    417           *
    418           * @param       searchType - The type of search that was performed.
    419           *              searchKey - Value that the search was executed on.
    420           *              result - The result of the search.
    421           *
    422           * @return      none
    423           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    424          void zb_FindDeviceConfirm( uint8 searchType, uint8 *searchKey, uint8 *result )
   \                     zb_FindDeviceConfirm:
    425          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    426            (void)searchType;
    427            (void)searchKey;
    428            (void)result;
    429          }
   \   000000   02....       LJMP    ?BRET
    430          
    431          /******************************************************************************
    432           * @fn          zb_ReceiveDataIndication
    433           *
    434           * @brief       The zb_ReceiveDataIndication callback function is called
    435           *              asynchronously by the ZigBee stack to notify the application
    436           *              when data is received from a peer device.
    437           *
    438           * @param       source - The short address of the peer device that sent the data
    439           *              command - The commandId associated with the data
    440           *              len - The number of bytes in the pData parameter
    441           *              pData - The data sent by the peer device
    442           *
    443           * @return      none
    444           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    445          void zb_ReceiveDataIndication( uint16 source, uint16 command, uint16 len, uint8 *pData  )
   \                     zb_ReceiveDataIndication:
    446          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   740A         MOV     A,#0xa
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FF           MOV     R7,A
   \   00000F   740C         MOV     A,#0xc
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F8           MOV     R0,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
    447            if (pData[len-1] == DOOR_UNLOCKED || pData[len-1] == DOOR_LOCKED) 
   \   000019   E8           MOV     A,R0
   \   00001A   2E           ADD     A,R6
   \   00001B   F5..         MOV     ?V0,A
   \   00001D   E9           MOV     A,R1
   \   00001E   3F           ADDC    A,R7
   \   00001F   F5..         MOV     ?V1,A
   \   000021   E5..         MOV     A,?V0
   \   000023   24FF         ADD     A,#-0x1
   \   000025   F582         MOV     DPL,A
   \   000027   E5..         MOV     A,?V1
   \   000029   34FF         ADDC    A,#-0x1
   \   00002B   F583         MOV     DPH,A
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   64F3         XRL     A,#0xf3
   \   000030   6019         JZ      ??zb_ReceiveDataIndication_0
   \   000032   E8           MOV     A,R0
   \   000033   2E           ADD     A,R6
   \   000034   F5..         MOV     ?V0,A
   \   000036   E9           MOV     A,R1
   \   000037   3F           ADDC    A,R7
   \   000038   F5..         MOV     ?V1,A
   \   00003A   E5..         MOV     A,?V0
   \   00003C   24FF         ADD     A,#-0x1
   \   00003E   F582         MOV     DPL,A
   \   000040   E5..         MOV     A,?V1
   \   000042   34FF         ADDC    A,#-0x1
   \   000044   F583         MOV     DPH,A
   \   000046   E0           MOVX    A,@DPTR
   \   000047   64F2         XRL     A,#0xf2
   \   000049   7027         JNZ     ??zb_ReceiveDataIndication_1
    448            {
    449              MCU_IO_SET(LED_PORT, LED_PIN, pData[len-1] == DOOR_LOCKED);
   \                     ??zb_ReceiveDataIndication_0:
   \   00004B   E8           MOV     A,R0
   \   00004C   2E           ADD     A,R6
   \   00004D   F5..         MOV     ?V0,A
   \   00004F   E9           MOV     A,R1
   \   000050   3F           ADDC    A,R7
   \   000051   F5..         MOV     ?V1,A
   \   000053   E5..         MOV     A,?V0
   \   000055   24FF         ADD     A,#-0x1
   \   000057   F582         MOV     DPL,A
   \   000059   E5..         MOV     A,?V1
   \   00005B   34FF         ADDC    A,#-0x1
   \   00005D   F583         MOV     DPH,A
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   64F2         XRL     A,#0xf2
   \   000062   7005         JNZ     ??zb_ReceiveDataIndication_2
   \   000064   75..01       MOV     ?V0,#0x1
   \   000067   8003         SJMP    ??zb_ReceiveDataIndication_3
   \                     ??zb_ReceiveDataIndication_2:
   \   000069   75..00       MOV     ?V0,#0x0
   \                     ??zb_ReceiveDataIndication_3:
   \   00006C   E5..         MOV     A,?V0
   \   00006E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000070   9292         MOV     0x90.2,C
    450            }
    451          }
   \                     ??zb_ReceiveDataIndication_1:
   \   000072   7F02         MOV     R7,#0x2
   \   000074   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   000077                REQUIRE _A_P1
    452          
    453          /******************************************************************************
    454           * @fn          uartRxCB
    455           *
    456           * @brief       Callback function for UART
    457           *
    458           * @param       port - UART port
    459           *              event - UART event that caused callback
    460           *
    461           * @return      none
    462           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    463          void uartRxCB( uint8 port, uint8 event )
   \                     uartRxCB:
    464          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    465            (void)port;
    466            (void)event;
    467          }
   \   000000   02....       LJMP    ?BRET

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myReportPeriod>`:
   \   000000   8813         DW 5000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myBindRetryDelay>`:
   \   000000   D007         DW 2000

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for myStartRetryDelay>`:
   \   000000   0A           DB 10

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleOsalEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleOsalEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_HandleKeys::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_StartConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_StartConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_SendDataConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_SendDataConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_BindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_BindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_AllowBindConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_AllowBindConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_FindDeviceConfirm::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_FindDeviceConfirm

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zb_ReceiveDataIndication::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zb_ReceiveDataIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??uartRxCB::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    uartRxCB

   Maximum stack usage in bytes:

   XSTACK Function
   ------ --------
      0   uartRxCB
      0   zb_AllowBindConfirm
     17   zb_BindConfirm
       13   -> HalLedSet
       13   -> osal_set_event
       17   -> osal_start_timerEx
       13   -> zb_SystemReset
      0   zb_FindDeviceConfirm
     18   zb_HandleKeys
       13   -> HalLedSet
       13   -> osal_set_event
       18   -> zb_SendDataRequest
     16   zb_HandleOsalEvent
       12   -> HalLedBlink
       16   -> osal_start_timerEx
       12   -> zb_BindDevice
       12   -> zb_StartRequest
     14   zb_ReceiveDataIndication
     16   zb_SendDataConfirm
       16   -> osal_start_timerEx
       12   -> osal_stop_timerEx
       12   -> zb_BindDevice
     16   zb_StartConfirm
       12   -> HalLedSet
       12   -> osal_set_event
       16   -> osal_start_timerEx
       12   -> zb_AllowBind
       12   -> zb_GetDeviceInfo


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for myBindRetryDelay>
       2  ?<Initializer for myReportPeriod>
       1  ?<Initializer for myStartRetryDelay>
       1  P1DIR
       1  _A_P1
       1  appState
       1  bindRetries
       2  myBindRetryDelay
       2  myReportPeriod
       1  myStartRetryDelay
       2  parentShortAddr
       1  reportFailureNr
       1  reportNr
       1  reportState
       3  uartRxCB
       6  uartRxCB::?relay
       3  zb_AllowBindConfirm
       6  zb_AllowBindConfirm::?relay
     114  zb_BindConfirm
       6  zb_BindConfirm::?relay
       3  zb_FindDeviceConfirm
       6  zb_FindDeviceConfirm::?relay
     174  zb_HandleKeys
       6  zb_HandleKeys::?relay
     141  zb_HandleOsalEvent
       6  zb_HandleOsalEvent::?relay
       4  zb_InCmdList
       2  zb_OutCmdList
     119  zb_ReceiveDataIndication
       6  zb_ReceiveDataIndication::?relay
     149  zb_SendDataConfirm
       6  zb_SendDataConfirm::?relay
      12  zb_SimpleDesc
     102  zb_StartConfirm
       6  zb_StartConfirm::?relay

 
 808 bytes in segment BANKED_CODE
  54 bytes in segment BANK_RELAYS
   2 bytes in segment SFR_AN
   5 bytes in segment XDATA_I
   5 bytes in segment XDATA_ID
  18 bytes in segment XDATA_ROM_C
   7 bytes in segment XDATA_Z
 
 867 bytes of CODE  memory
  18 bytes of CONST memory
   0 bytes of DATA  memory (+ 2 bytes shared)
  12 bytes of XDATA memory

Errors: none
Warnings: none
